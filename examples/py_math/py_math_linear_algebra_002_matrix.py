import numpy as np 

A = np.array([[1,2,3], [0.4,-4,2]])

print(A)
print(A.shape)

# # 1 矩阵
# 矩阵咋一看是是一个 m x n 大小的数字方阵， 
# 矩阵 A 的 shape 属性，就获取了一个表示规模的元组：2 行 3 列
# 这里， 矩阵在 numpy 中是二维数组

# # 2 一些特殊的矩阵
#
# 方阵： 行数等于列数
A = np.array([[1, 2, 3], 
              [4, 5, 6],
              [7, 8, 9]])
print(A)
print(A.shape)

# 矩阵转置
A = np.array([[1, 2, 3], 
             [4, 5, 6]])
print(A)
print(A.T)

# 对称矩阵
# 如果原矩阵和转置后新得到的矩阵相等，那么这个矩阵我们就称其为对称矩阵
# 对称矩阵是非常重要的矩阵，在矩阵中扮演着很重要的角色
S = np.array([[1, 2, 3],
              [2, 5, 6],
              [3, 6, 9]])
print(S)
print(S.T)

# 向量：特殊的一维矩阵
# n 维的行向量可以看做是 1 × n 的矩阵，
# 同理， n 维的列向量也同样可以看做是 n × 1 的特殊矩阵。
# 这样 python 矩阵和向量表示可以一致， 计算也可以一致
p = np.array([[1, 2, 3]])
print(p)
print(p.T) # 列向量用行向量的转置表示

# 零矩阵：元素全 0
A = np.zeros([3, 5])
print(A)

# 对角矩阵
# 非对角元素位置上全部为 0 的方阵，我们称之为对角矩阵
A = np.diag([1, 2, 3])
print(A)

# 单位矩阵：对角线为 1
# n 阶单位矩阵记作 In
I = np.eye(4)
print(I)

# # 3 矩阵的基本运算
#
# 矩阵的加法
# [[a11, a12, a13], [a21, a22, a23]] 
#   + 
# [[b11, b12, b13], [b21, b22, b23]] 
# = [[a11 + b11, a12 + b12, a13 + b13], [a21+ b21, a22+ b22, a23 + b23]] 
A = np.array([[1, 2, 3],
              [4, 5, 6]])
B = np.array([[10, 20, 30],
              [40, 50, 60]])
print(A+B)

# 矩阵的数量乘法
# c [[a11, a12, a13], [a21, a22, a23]] = # [[ca11, ca12, ca13], [ca21, ca22, ca23]] 
A = np.array([[1, 2, 3],
              [4, 5, 6]])
print(2*A)

# 4 矩阵与矩阵的乘法
# [[a11, a12], 
#  [a21, a22], 
#  [a31, a32]] 
# [[b11, b12, b13], 
#  [b21, b22, b23]] 
# = [[a11b11 + a12b21, a11b12 + a12b22, a11b13 + a12b23], 
#    [a21b21 + a22b21, a21b12 + a22b22, a21b13 + a22b23],
#    [a31b21 + a32b21, a31b12 + a32b22, a31b13 + a32b23]]
A = np.array([[1, 2],
              [3, 4],
              [5, 6]])
B = np.array([[3, 4, 5],
              [6, 7, 8]])

print(np.dot(A, B))

# 5 改变空间位置：矩阵乘以向量的本质
# 矩阵与向量的乘法，一般而言写作矩阵 A 在左，列向量 x 在右的 Ax 的形式
# 矩阵与向量的乘法，其实可以看作是矩阵与矩阵乘法的一种特殊形式，只不过位于后面的矩阵列数为 1 而已。
A = np.array([[1, 2],
              [3, 4],
              [5, 6]])
x = np.array([[4, 5]]).T

print(np.dot(A, x))
# 从结果看，原始向量表示二维空间中的一个点，坐标为 (4,5)，经过矩阵 
# [[1, 2],[3, 4], [5, 6]]
# 乘法的作用，转化为三维空间中坐标为 (14,32,50) 的点。
# 从这个例子中我们可以总结一下矩阵的作用：
#   在特定矩阵的乘法作用下，原空间中的向量坐标，被映射到了目标空间中的新坐标，
#   向量的空间位置（甚至是所在空间维数）由此发生了转化。

# 从行的角度思考
# 位于矩阵 A 第 i 行的行向量的各成分和列向量 x 各成分分别相乘后相加，
#   得到的就是结果向量的第 i 个成分。
#   这个计算方法有没有感觉很熟悉？没错，这不就是向量点乘的定义式么？

# 列的角度：重新组合矩阵的列向量
# 从列的角度来看，矩阵 A 与向量 x 的乘法是对矩阵 A 的各列向量进行线性组合的过程，
#   每个列向量的组合系数就是向量 x 的各对应成分。

# 6 进一步引申：变换向量的基底
# 矩阵 [[a, b],[c, d]] 与 向量 [x, y] 相乘，相当于
#   把默认的基底 ([1, 0]T, [0, 1]T) 变换成 ([a, c]T,[b, d]T) 后，
#   [x, y] 在基底 ([a, c]T,[b, d]T) 上的向量描述。
#   矩阵的各列就是映射后的新基底。
#   拓展到三维或 n 维空间也能成立。

# 7 基变换的意外情况
# 上述基变换建立在矩阵是方阵的基础上， 如果非方阵会有异常情况
#   为什么这么说呢？
#   对于一个 m×n 的矩阵 A 和 n 维列向量 x，
#   经过 Ax 的乘法作用，x 的 n 个 n 维默认基向量构成的基底被转换成了 n 个 m 维的目标向量。
#     当 n>m 的时候，这 n 个向量线性相关，因此不构成基底；
#     当 n<m 的时候，即使这 n 个向量线性无关，由于它们不能表示 m 维空间中的所有向量，因此也不能称之为基底；
#     当且仅当 n=m，且这 n 个向量线性无关的时候，它们才能称之为一组新的基底。
#   不过即便有这些意外情况，我们这一讲里讨论的内容仍然具有重要意义，
#   矩阵 A 的各列向量是 x 默认基底经过转换后的目标向量，
#   正因为其在维度和线性相关性方面存在各种不同情况，
#   因此这组目标向量的张成空间和原始向量所在的空间之间，
#   就会存在多种不同的对应关系，
#   这便是我们后续将要重点讨论的空间映射相关内容。